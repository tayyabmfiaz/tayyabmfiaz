"""
Author: Tayyab Fiaz
Date: 11/29/2023
Description: The files basis a simple, text-based where there it is a two player game where you use strategy,
and the person who loses all their pieces first, loses the game.
"""
import random

def print_board(board):
	# Seed the random number generator to ensure consistent output
	random.seed(seed)

	# Read pieces from file
	with open(file_name, "r") as pieces_file:
		pieces = pieces_file.read().split()

	# Ensure there are always two "F" pieces
	f_positions = [(random.randint(0, length - 1), random.randint(0, width - 1)) for _ in range(2)]

	# Print column indices
	print("    " + "    ".join(map(str, range(width))))

	# Print the game board
	for i in range(length):
		print(f"{i}  ", end="")
		for j in range(width):
			position = (i, j)
			if position in f_positions:
				print(" F ", end="   ")  # Print an "F" piece
			elif random.random() < 0.4:  # Adjust the probability (e.g., 0.2 for 20% empty spaces)
				print("   ", end="   ")  # Print an empty space
			else:
				print(random.choice(pieces), end="   ")
		print()


def make_move(board, piece, start_position, end_position):
	# Update the board based on the move
	board[end_position[0]][end_position[1]] = piece
	board[start_position[0]][start_position[1]] = "   "


def is_valid_move(board, piece, start_position, end_position):
	# Check if the move is within bounds
	if not (0 <= start_position[0] < len(board) and 0 <= start_position[1] < len(board[0]) and
			0 <= end_position[0] < len(board) and 0 <= end_position[1] < len(board[0])):
		return False
	# Check if the start position contains the correct piece
	if board[start_position[0]][start_position[1]] != piece:
		return False
	# Check if the end position is empty
	if board[end_position[0]][end_position[1]] != "   ":
		return False
	# Check if the move is horizontal or vertical (not diagonal)
	if start_position[0] != end_position[0] and start_position[1] != end_position[1]:
		return False
	# Check if there are no pieces blocking the path
	if start_position[0] == end_position[0]:  # Move is horizontal
		step = 1 if start_position[1] < end_position[1] else -1
		for col in range(start_position[1] + step, end_position[1], step):
			if board[start_position[0]][col] != "   ":
				return False
	elif start_position[1] == end_position[1]:  # Move is vertical
		step = 1 if start_position[0] < end_position[0] else -1
		for row in range(start_position[0] + step, end_position[0], step):
			if board[row][start_position[1]] != "   ":
				return False

	return True


def has_won(board, player):
	# Check if any of the player's pieces have reached the last row
	last_row = len(board) - 1
	for col in range(len(board[0])):
		if board[last_row][col] == f" {player} ":
			return True
	return False


def tactego(seed, file_name, length, width):
	# Seed the random number generator for the game
	random.seed(seed)

	# Initialize the game board
	board = [["   " for _ in range(width)] for _ in range(length)]

	# Read pieces from file
	with open(file_name, "r") as pieces_file:
		pieces = pieces_file.read().split()

	# Ensure there are always two "F" pieces
	f_positions = [(random.randint(0, length - 1), random.randint(0, width - 1)) for _ in range(2)]
	for pos in f_positions:
		board[pos[0]][pos[1]] = " F "

	# Main game loop
	while True:
		print_board(board)

		# Get player move input
		start_position = tuple(map(int, input("Select Piece to Move by Position >> ").split()))
		end_position = tuple(map(int, input("Select Position to move Piece >> ").split()))

		# Check if the move is valid
		piece = board[start_position[0]][start_position[1]]
		if not is_valid_move(board, piece, start_position, end_position):
			print("Invalid move. Try again.")
			continue

		# Make the move
		make_move(board, piece, start_position, end_position)

		# Check if the player has won
		if has_won(board, "B"):
			print_board(board)
			print("B has won the game")
			break


if __name__ == '__main__':
	# Get user input for game parameters
	seed = input('What is the seed? ')
	file_name = input('What is the file name for the pieces? ')
	length = int(input('What is the length? '))
	width = int(input('What is the width? '))

	# Start the game
	tactego(seed, file_name, length, width)
