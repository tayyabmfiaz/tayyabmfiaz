"""
File:    mancala.py
Author:  Tayyab Fiaz
Date:    11/03/2023
Section: 14
E-mail:  tayyabf1@umbc.edu
Description: the files basis is a text based mancala game. By using functions; if, elif, else; while loops; for loops;
user inputs; and print statements: we created a fully functional 2 player mancala game solely using text and
"""
# Constants for defining the visual layout of the Mancala board
BLOCK_WIDTH = 7  # Width of each block used to represent cups and mancalas on the board.
BLOCK_HEIGHT = 7  # Height of each block used to represent cups and mancalas on the board.
BLOCK_SEP = "*"  # The character used to create the visual separation or borders within the board.
SPACE = ' '  # A space character, used for creating empty spaces within the board.
NUM_CUPS = 6  # The number of cups on each side of the Mancala board. It's set to 6 cups for each player.


# Function to run the Mancala game
def draw_board(top_cups, bottom_cups, mancala_a, mancala_b):
	"""
	draw_board is the function that you should call in order to draw the board.
		top_cups and bottom_cups are lists of strings.  Each string should be length BLOCK_WIDTH and each list should be of length BLOCK_HEIGHT.
		mancala_a and mancala_b should be lists of strings.  Each string should be BLOCK_WIDTH in length, and each list should be 2 * BLOCK_HEIGHT + 1

	:param top_cups: This should be a list of strings that represents cups 1 to 6 (Each list should be at least BLOCK_HEIGHT in length, since each string in the list is a line.)
	:param bottom_cups: This should be a list of strings that represents cups 8 to 13 (Each list should be at least BLOCK_HEIGHT in length, since each string in the list is a line.)
	:param mancala_a: This should be a list of 2 * BLOCK_HEIGHT + 1 in length which represents the mancala at position 7.
	:param mancala_b: This should be a list of 2 * BLOCK_HEIGHT + 1 in length which represents the mancala at position 0.
	"""
	# Initialize a 2D list called 'board' to represent the Mancala board with empty spaces.
	board = [[SPACE for _ in range((BLOCK_WIDTH + 1) * (len(top_cups) + 2) + 1)] for _ in range(BLOCK_HEIGHT * 2 + 3)]
	# Set the borders of the 'board' with 'BLOCK_SEP' characters.
	for p in range(len(board)):
		board[p][0] = BLOCK_SEP
		board[p][len(board[0]) - 1] = BLOCK_SEP
	for q in range(len(board[0])):
		board[0][q] = BLOCK_SEP
		board[len(board) - 1][q] = BLOCK_SEP
	# Draw a midline using 'BLOCK_SEP' characters.
	for p in range(BLOCK_WIDTH + 1, (BLOCK_WIDTH + 1) * (len(top_cups) + 1) + 1):
		board[BLOCK_HEIGHT + 1][p] = BLOCK_SEP
	# Create vertical separators between cups on the board.
	for i in range(len(top_cups)):
		for p in range(len(board)):
			board[p][(1 + i) * (1 + BLOCK_WIDTH)] = BLOCK_SEP
	# Create horizontal separators within each cup.
	for p in range(len(board)):
		board[p][1 + BLOCK_WIDTH] = BLOCK_SEP
		board[p][len(board[0]) - BLOCK_WIDTH - 2] = BLOCK_SEP
	# Draw stones in the cups by invoking 'draw_block' for each cup.
	for i in range(len(top_cups)):
		draw_block(board, i, 0, top_cups[i])
		draw_block(board, i, 1, bottom_cups[i])
	# Draw the Mancalas for both players by invoking 'draw_mancala'.
	draw_mancala(0, mancala_a, board)  # Draw the front Mancala.
	draw_mancala(1, mancala_b, board)  # Draw the back Mancala.
	# Print the 'board' as a formatted string by joining its elements.
	print('\n'.join([''.join(board[i]) for i in range(len(board))]))

# Function to draw a player's Mancala pit
def draw_mancala(fore_or_aft, mancala_data, the_board):
	"""
		Draw_mancala is a helper function for the draw_board function.
	:param fore_or_aft: front or back (0, or 1)
	:param mancala_data: a list of strings of length 2 * BLOCK_HEIGHT + 1 each string of length BLOCK_WIDTH
	:param the_board: a 2d-list of characters which we are creating to print the board.
	"""
	# Check whether we are drawing the front or back Mancala pit based on the 'fore_or_aft' parameter.
	if fore_or_aft == 0:
		# Front Mancala pit: Iterate through the rows of 'mancala_data'.
		for i in range(len(mancala_data)):
			data = mancala_data[i][0: BLOCK_WIDTH].rjust(BLOCK_WIDTH)
			# Iterate through the columns of 'mancala_data'.
			for j in range(len(mancala_data[0])):
				# Copy the formatted data into the corresponding position on the game board.
				the_board[1 + i][1 + j] = data[j]
	else:
		# Back Mancala pit: Similar process as above, but positions the data at the end of the row.
		for i in range(len(mancala_data)):
			data = mancala_data[i][0: BLOCK_WIDTH].rjust(BLOCK_WIDTH)
			for j in range(len(mancala_data[0])):
				# Copy the formatted data to the appropriate position at the end of the row.
				the_board[1 + i][len(the_board[0]) - BLOCK_WIDTH - 1 + j] = data[j]


# Function to draw a cup with stones
def draw_block(the_board, pos_x, pos_y, block_data):
	"""
	Draw block is a helper function for the draw_board function.
	:param the_board: the board is the 2d grid of characters we're filling in
	:param pos_x: which cup it is
	:param pos_y: upper or lower
	:param block_data: the list of strings to put into the block.
	"""
	# Iterate through the rows (height) of the cup represented by 'block_data'.
	for i in range(BLOCK_HEIGHT):
		data = block_data[i][0:BLOCK_WIDTH].rjust(BLOCK_WIDTH)
		# Iterate through the columns (width) of the cup.
		for j in range(BLOCK_WIDTH):
			# Copy the formatted data (representing stones) into the corresponding position on the game board.
			the_board[1 + pos_y * (BLOCK_HEIGHT + 1) + i][1 + (pos_x + 1) * (BLOCK_WIDTH + 1) + j] = data[j]


# Function to get player names
def get_player():
	"""
	Get Player is a user input asking people what they want to have their name as
	"""
	players = []  # Create an empty list to store the player names.
	player_1 = input('Player 1, please tell me your name: ')  # Prompt for the name of the first player.
	player_2 = input('Player 2, please tell me your name: ')  # Prompt for the name of the second player.
	players.append(player_1)  # Add the name of the first player to the 'players' list.
	players.append(player_2)  # Add the name of the second player to the 'players' list.
	return players  # Return a list containing the names of both players.


# Function to run the Mancala game
def run_game():
	# Initialize game-related variables
	playing = True  # A flag to indicate whether the game is still ongoing.
	playerOne = True  # A flag to track the current player.
	mancala_val = [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0]
	player_1, player_2 = get_player()
	i = 0
	# Prepare the display format for the mancala values
	for element in mancala_val:
		mancala_val[i] = int(mancala_val[i])
		if int(mancala_val[i]) < 10:
			mancala_val[i] = " " + str(mancala_val[i])
		else:
			mancala_val[i] = str(mancala_val[i])
		i = i + 1
		all_cells = []
		for i in range(1, 14):
			current_cell = []
			if i != 7:
				current_cell.append(f'Cup')
				current_cell.append(f'{i}')
				current_cell.append(f'Stones')
				current_cell.append(f'{mancala_val[i - 1]}')
				for _ in range(BLOCK_HEIGHT - 1):
					current_cell.append(" " * BLOCK_WIDTH)
				all_cells.append(current_cell)
		top_rows = all_cells[:NUM_CUPS]
		bottom_rows = all_cells[NUM_CUPS:NUM_CUPS + NUM_CUPS][::-1]
		first_mancala = ["     ", "     ", f"{player_2}   ", "     ", "     ",
						 "     ", "     ", f"Stones   ", "     ", "     ",
						 "     ", "     ", f" {mancala_val[6]}   ", "     ", "     "]
		second_mancala = ["     ", "     ", f"{player_1}   ", "     ", "     ",
						  "     ", "     ", f"Stones    ", "     ", "     ",
						  "     ", "     ", f"{mancala_val[13]}   ", "     ", "     "]
		draw_board(top_rows, bottom_rows, first_mancala, second_mancala)
		if playerOne:
		# Get player input
			user_input = input(f"{player_1}, What cup do you want to move? ")
		else:
			user_input = input(f"{player_2}, What cup do you want to move? ")
		chosen_man = 0
		# Determine the chosen cup based on user input
		if playerOne and user_input == '1':
			chosen_man = 0
		elif playerOne and user_input == '2':
			chosen_man = 1
		elif playerOne and user_input == '3':
			chosen_man = 2
		elif playerOne and user_input == '4':
			chosen_man = 3
		elif playerOne and user_input == '5':
			chosen_man = 4
		elif playerOne and user_input == '6':
			chosen_man = 5
		elif not(playerOne) and user_input == '1':
			chosen_man = 0
		elif not(playerOne) and user_input == '2':
			chosen_man = 1
		elif not(playerOne) and user_input == '3':
			chosen_man = 2
		elif not(playerOne) and user_input == '4':
			chosen_man = 3
		elif not(playerOne) and user_input == '5':
			chosen_man = 4
		elif not(playerOne) and user_input == '6':
			chosen_man = 5
		# Distribute the stones from the chosen cup
		if int(chosen_man) >= 0:
			give_pile = mancala_val[chosen_man]
			mancala_val[chosen_man] = 0
		stones = chosen_man + 1
		while int(give_pile) > 0:
			mancala_val[stones] = int(mancala_val[stones]) + 1
			give_pile = int(give_pile) - 1
			stones = int(stones) + 1

			if int(stones) > 13:
				stones = 0
			mancala_val[stones] = int(mancala_val[stones]) + 1
			give_pile = int(give_pile) - 1
			if int(give_pile) == 0:
				last_stones = stones
			else:
				stones = int(stones) + 1

				if int(stones) > 13:
					stones = 0
		# Determine the next player's turn
		if playerOne and int(last_stones) == 6:
			# Player gets another turn if the last stone ends up in their Mancala
			playerOne = True
		elif not playerOne and last_stones == 13:
			# Player gets another turn if the last stone ends up in their Mancala
			playerOne = False
		else:
			playerOne = not playerOne
	# Checking for the end of the game
	side_1 = 0
	side_2 = 0
	for j in range(6):
		side_1 = int(side_1) + int(mancala_val[j])
		side_2 = int(side_2) + int(mancala_val[j + 7])
	if int(side_1) == 0 or int(side_2) == 0:
		playing = False
		mancala_val[6] = int(mancala_val[6]) + int(side_1)
		mancala_val[13] = int(mancala_val[13]) + int(side_2)
		for k in range(6):
			mancala_val[k] = 0
			mancala_val[k + 7] = 0
	if mancala_val[6] > mancala_val[13]:
		winner = player_1
	elif mancala_val[13] > mancala_val[6]:
		winner = player_2
	else:
		winner = "It's a tie!"
	print(f"{winner} is the winner.")
	draw_board(top_rows, bottom_rows, first_mancala, second_mancala)


if __name__ == "__main__":
	run_game()
